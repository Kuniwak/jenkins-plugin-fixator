#!/bin/bash -eu
set -o pipefail


function start-jenkins() {
  local BASE_PATH="$(cd "$(dirname "$0")"; pwd)"
  local WORKSPACE="/tmp/jenkins-plugin-fixator-test"

  local RESULT_DIR="$WORKSPACE/result"
  local RESULT_STDOUT="$RESULT_DIR/jenkins.stdout"
  local RESULT_STDERR="$RESULT_DIR/jenkins.stderr"

  mkdir -p "$RESULT_DIR"
  echo > "$RESULT_STDOUT"
  echo > "$RESULT_STDERR"

  local JENKINS_WAR_URL='http://mirrors.jenkins-ci.org/war-stable/2.19.2/jenkins.war'
  local JENKINS_WAR="$WORKSPACE/jenkins.war"
  local JENKINS_CONFIG_XML_TEMPLATE="$BASE_PATH/fixture/config.xml"
  local JENKINS_HOME="$WORKSPACE/jenkins"
  local JENKINS_PID="$WORKSPACE/jenkins.pid"
  local JENKINS_PORT='3001'
  local ENDPOINT="http://localhost:$JENKINS_PORT"

  # XXX: This lock is not perfect, but we do not need a perfect lock in this test.
  if curl --fail --head --silent --location "$ENDPOINT"; then
    echo "Jenkins is already running. Exit."
    exit 0
  fi

  mkdir -p "$WORKSPACE"
  [[ -f "$JENKINS_WAR" ]] || curl --fail --location "$JENKINS_WAR_URL" > "$JENKINS_WAR"

  [[ -n "$JENKINS_HOME" ]] || rm -rf "$JENKINS_HOME"
  mkdir -p "$JENKINS_HOME"

  # XXX: We do not need auth in this test.
  cat "$JENKINS_CONFIG_XML_TEMPLATE" > "$JENKINS_HOME/config.xml"

  # XXX: We do not need the setup wizard, because it forcibly enable auth.
  JENKINS_HOME="$JENKINS_HOME" java \
    -Djenkins.install.runSetupWizard=false \
    -jar "$JENKINS_WAR" \
    --httpPort="$JENKINS_PORT" \
    --sessionTimeout=60000 \
    > "$RESULT_STDOUT" 2> "$RESULT_STDERR" &

  echo $! > "$JENKINS_PID"
}


start-jenkins "$@"
